{"/home/travis/build/npmtest/node-npmtest-node-status/test.js":"/* istanbul instrument in package npmtest_node_status */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-status/lib.npmtest_node_status.js":"/* istanbul instrument in package npmtest_node_status */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_status = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_status = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-status/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-status && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_status */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_status\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_status.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_status.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_status.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_status.__dirname + '/lib.npmtest_node_status.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-status/node_modules/node-status/status.js":"const colors = require('colors');\nconst util = require('util');\nconst tty = require('tty');\nconst charm = require('charm')(process);\nconst cliSpinners = require('cli-spinners');\nconst cliCursor = require('cli-cursor');\n\nconst PADDING = '  ';\n\nvar iterations = 0;\nvar looper = null;\nvar running = false;\nvar items = {};\nvar defaultPattern = null;\nvar settings = {\n  invert: false,\n  interval: 250,\n  pattern: null,\n  bottom: false\n};\n\nvar isatty = tty.isatty(1) && tty.isatty(2);\nvar tty_size = {\n  width: isatty\n    ? process.stdout.getWindowSize\n      ? process.stdout.getWindowSize(1)[0]\n      : tty.getWindowSize()[1]\n    : 75,\n  height: isatty\n    ? process.stdout.getWindowSize\n      ? process.stdout.getWindowSize(1)[1]\n      : tty.getWindowSize()[2]\n    : 75\n};\n\n//\n// This is a single item (Or cell or whatever you call it) in the status display\n//\nvar Item = function (options) {\n  const defaults = {\n    name: null,\n    max: null,\n    precision: 2,\n    steps: false\n  };\n  for (var attrname in defaults) {\n    this[attrname] = options.hasOwnProperty(attrname) && options[attrname] !== null ? options[attrname] : defaults[attrname];\n  }\n  if(options.custom) this.custom = options.custom.bind(this);\n  this.val = options.count || 0;\n};\n\n//\n// Item functions for value changes, rendering, etc\n//\nItem.prototype = {\n  inc: function (amount) {\n    this.val += (amount !== undefined) ? amount : 1;\n  },\n\n  dec: function (amount) {\n    this.val -= (amount !== undefined) ? amount : 1;\n  },\n\n  doneStep: function (success, message) {\n    if(!this.steps || this.count >= this.steps.length) return;\n    charm.erase('line').erase('down');\n    message = message ? ` - ${message}` : '';\n    write(`${success ? '✔'.green : '✖'.red} ${this.render('step')}${message}\\n`);\n    this.inc();\n  },\n\n  render: function (style) {\n    switch (style) {\n      case 'step':\n        if(!this.steps || this.count >= this.steps.length) return '';\n        return `${this.steps[this.count]}`;\n      case 'custom':\n        return this.custom ? this.custom() : '';\n      case 'percentage':\n        if (!this.max) return '';\n        var max = typeof this.max == 'function'\n                ? this.max()\n                : this.max;\n        return (100 * this.count / max).toFixed(this.precision) + '%';\n      case 'time':\n        return nicetime(this.count);\n      case 'bar':\n        if (!this.max) return '';\n        var bar_len = 10;\n        var max = typeof this.max == 'function'\n                ? this.max()\n                : this.max;\n        var done = Math.round(bar_len * this.count / max);\n        return '[' + '▒'.repeat(Math.min(bar_len, done)) + '-'.repeat(Math.max(0,bar_len - done)) + ']';\n      case 'default':\n      case 'count':\n      default:\n        var max = typeof this.max == 'function'\n                ? this.max()\n                : this.max;\n        return this.count + (max ? '/' + max : '');\n    }\n  }\n};\n\n//\n// Getter/setter for count. Auto-rendering, basically.\n//\nObject.defineProperties(Item.prototype, {\n  count: {\n    get: function () {\n      return this.val;\n    },\n    set: function (newValue) {\n      this.val = newValue;\n    }\n  }\n});\n\n\n//\n// Repeats a string, using it for the status bar instead of loops\n//\nString.prototype.repeat = function (len) {\n  return new Array(len + 1).join(this);\n};\n\n//\n// Render the status bar row\n// If stamp is true, it will console.log it instead of doing an stdout\n//\nconst render = () => {\n  iterations++;\n  if (!running) return;\n\n  var color_len = 0;\n  for (var i = 0; i < items.length; i++) {\n    if (items[i].color) {\n      color_len += (items[i].color('')).length;\n    }\n  }\n\n  var out = generateBar();\n  var bar = ' '.repeat(tty_size.width);\n\n  if (settings.invert) {\n    bar = bar.inverse;\n    out = out.inverse;\n  }\n\n  var current_height = Math.ceil((out.length - color_len) / tty_size.width );\n\n  charm.position(function (x, y) {\n    var current_row = y;\n\n    // If the current cursor row was on the bar, we need to make a gap\n    if (settings.bottom && current_row > tty_size.height - current_height) {\n      for(var i = 0; i < current_height; i++) {\n        // charm.delete('line', 1);\n        charm.erase('line');\n        write('\\n');\n      }\n      y -= current_height - (tty_size.height - current_row);\n    }\n\n    charm\n      .move(0, settings.bottom ? tty_size.height : 0)\n      .left(tty_size.width)\n      .write(bar);\n\n    if(settings.bottom) {\n      for(var i = 0; i < Math.max(0, current_height - 1); i++) {\n        charm.left(tty_size.width).write(bar).up(1);\n      }\n    }\n\n    charm\n      .left(tty_size.width)\n      .write(out)\n      .position(x, y);\n\n  });\n};\n\nconst write = (string) => process.stdout.write(string);\n\nconst generateBar = (withPattern) => {\n  var pattern = withPattern ? withPattern : (settings.pattern ? settings.pattern : defaultPattern);\n  return pattern.replace(/\\{([a-zA-z0-9\\s\\.]*)\\}/g, (match, id) => {\n    var tokens = id.split('.');\n    var portion = '';\n    var color = null;\n    var modifier = null;\n    if(tokens.length > 1 && colors[tokens[1]]) {\n      color = colors[tokens[1]];\n      modifier = tokens.length > 2 ? tokens[2] : null;\n    } else if (tokens.length > 2 && colors[tokens[2]]) {\n      color = colors[tokens[2]];\n      modifier = tokens[1];\n    } else if(tokens.length > 1) {\n      modifier = tokens[1];\n    }\n\n    switch (tokens[0]) {\n      case 'timestamp':\n      case 'uptime':\n        portion = nicetime(process.uptime(), true);\n        break;\n      case 'spinner':\n        var spinnerType = modifier || 'dots';\n        portion = cliSpinners[spinnerType].frames[iterations % cliSpinners[spinnerType].frames.length];\n        break;\n      default:\n        if(items[tokens[0]]) portion = items[tokens[0]].render(modifier);\n        break;\n    }\n    return color ? color(portion) : portion;\n  });\n};\n\n//\n// Currently just changes the milliseconds to either a number of seconds or number of minutes\n//\nvar nicetime = (ms, use_seconds) => {\n  var seconds = (ms / (use_seconds ? 1 : 1000)).toFixed((use_seconds ? 0 : 3));\n  var minutes = (seconds / 60).toFixed(3);\n  var time = (minutes < 2) ? seconds : minutes;\n  return time + (minutes < 2 ?  's' : 'm');\n};\n\nprocess.on('exit', function () {\n  if(running) stamp();\n});\n\nexports.addItem = (name, options) => {\n  if(!name || typeof name !== 'string') return null;\n  options = options || {};\n  options.name = name;\n  var item = new Item(options);\n  items[name] = item;\n  rebuildPattern();\n  return items[name];\n};\n\nvar rebuildPattern = () => {\n  defaultPattern = Object.keys(items).reduce((memo, item) => {\n    return `${memo}${PADDING}${item}: {${item}}${PADDING}|`;\n  }, `Status @ {uptime}${PADDING}|`);\n};\n\nexports.removeItem = (item) => {\n  if(typeof item === 'string') {\n    delete items[item];\n  } else if(item instanceof Item) {\n    delete items[item.name];\n  }\n  rebuildPattern();\n}\n\nexports.removeAll = () => {\n  items = {};\n  rebuildPattern();\n}\nexports.toString = () => generateBar();\nexports.clear = () => charm.erase('line').erase('down');\n\nexports.console = function () {\n  var methods = {};\n  ['log', 'info', 'error', 'warn'].forEach(m => {\n    methods[m] = function () {\n      if(m !== 'log' || running) exports.clear();\n      console[m].apply(this, arguments);\n      if(running) render();\n    }\n  });\n  return methods;\n};\n\n//\n// Turns it on, will start rendering on interval now\n//\nexports.start = (opts) => {\n  settings = Object.assign(settings, opts)\n  running = true;\n  if(!settings.bottom) cliCursor.hide();\n  render();\n  looper = setInterval(render, settings.interval);\n};\n\nexports.setPattern = (pattern) => settings.pattern = pattern;\n\nexports.stop = () => {\n  running = false;\n  clearTimeout(looper);\n  cliCursor.show();\n  charm.end();\n};\n\n//\n// Stamps the current status to the console\n//\nvar stamp = exports.stamp = (withPattern) => {\n  charm.erase('line').erase('down');\n  return console.log(generateBar(withPattern));\n}\n\n//\n// Gets the total number of cells in the bar\n//\nexports.cellCount = () => Object.keys(items).length;\n"}